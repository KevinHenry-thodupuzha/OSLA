DATA SEGMENT
MSG1 DB 0AH,0DH,'Enter first number (0–255): $'
MSG2 DB 0AH,0DH,'Enter second number (0–255): $'
MSG3 DB 0AH,0DH,'Quotient = $'
MSG4 DB 0AH,0DH,'Remainder = $'
MSG5 DB 0AH,0DH,'Divide by zero not allowed!$'
NUM1 DB ?
NUM2 DB ?
QUOT DB ?
REM  DB ?
DATA ENDS

CODE SEGMENT
ASSUME DS:DATA, CS:CODE

START:
    MOV AX, DATA
    MOV DS, AX

;===========================
; READ FIRST NUMBER (multi-digit)
;===========================
    LEA DX, MSG1
    MOV AH, 09H
    INT 21H

    CALL READ_DECIMAL
    MOV NUM1, AL

;===========================
; READ SECOND NUMBER
;===========================
    LEA DX, MSG2
    MOV AH, 09H
    INT 21H

    CALL READ_DECIMAL
    MOV NUM2, AL

;===========================
; DIVISION
;===========================
    MOV AL, NUM1
    MOV BL, NUM2

    CMP BL, 0
    JE DIV_ZERO

    MOV AH, 0
    DIV BL          ; AL ÷ BL ? AL=quotient, AH=remainder
    MOV QUOT, AL
    MOV REM, AH

;===========================
; DISPLAY RESULTS
;===========================
    LEA DX, MSG3
    MOV AH, 09H
    INT 21H
    MOV AL, QUOT
    CALL PRINT_DECIMAL

    LEA DX, MSG4
    MOV AH, 09H
    INT 21H
    MOV AL, REM
    CALL PRINT_DECIMAL

    JMP EXIT

DIV_ZERO:
    LEA DX, MSG5
    MOV AH, 09H
    INT 21H
    JMP EXIT

;===========================
; SUBROUTINE: READ_DECIMAL
; Reads multi-digit decimal number into AL
;===========================
READ_DECIMAL PROC
    XOR BX, BX          ; BX = 0 (accumulator)
READ_NEXT:
    MOV AH, 01H
    INT 21H
    CMP AL, 0DH         ; Enter key?
    JE  READ_DONE
    SUB AL, 30H         ; convert from ASCII to digit
    MOV CL, AL
    MOV AX, BX
    MOV DL, 10
    MUL DL              ; AX = BX * 10
    ADD AL, CL
    MOV BX, AX
    JMP READ_NEXT

READ_DONE:
    MOV AL, BL
    RET
READ_DECIMAL ENDP

;===========================
; SUBROUTINE: PRINT_DECIMAL
; Prints AL as decimal number
;===========================
PRINT_DECIMAL PROC
    XOR CX, CX
    MOV BL, 10

PD_LOOP:
    XOR AH, AH
    DIV BL              ; AL ÷ 10
    PUSH AX             ; push remainder
    INC CX
    CMP AL, 0
    JNE PD_LOOP

PD_PRINT:
    POP AX
    ADD AH, 30H
    MOV DL, AH
    MOV AH, 02H
    INT 21H
    LOOP PD_PRINT
    RET
PRINT_DECIMAL ENDP

EXIT:
    MOV AH, 4CH
    INT 21H

CODE ENDS
END START